var all=[]
func SectorChecker(p1:int,p2:int,p3:int)->int:
	var dist:=0xffffff
	var info:int=0
# warning-ignore:integer_division
	var c1=int(p1/32)
# warning-ignore:integer_division
	var c2=int(p2/32)
# warning-ignore:integer_division
	var c3=int(p3/32)
	for size in 6: #6 means diameter of 9^3=729 sectors (theres no way theres nothing inside)
		var delete:int=size-1
		for r in range(int(max(c1-size,0)),int(min(c1+size,7))+1):
			for g in range(int(max(c2-size,0)),int(min(c2+size,7))+1):
				#if r and g are in delete area
				var skip:=int(r<=c1+delete and r>=c1-delete and g<=c2+delete and g>=c2-delete)
				#delete adjust is what "delete" would delete from normal range()
				#it also adjusts for the border, not deleting what is limited by border
				var deladjust:int=(delete*2+1+int(min(c3-delete,0))+7-int(max(c3+delete,7)))*skip
				for b in range(int(max(c3-size,0)),int(min(c3+size,7))-deladjust+1):
					#skips b over delete zone
					b+=int(b>=c3-delete)*skip*(delete*2+1+int(min(c3-delete,0))+7-int(max(c3+delete,7)))
					#if array is further than dist, skip
					var boxdist:=DistToBox(p1,p2,p3,r*32,g*32,b*32,r*32+32,g*32+32,b*32+32)
					for n in all[r][g][b][0].size()*int(!boxdist>dist):
						#if point closer, update dist and info
						var point:int=all[r][g][b][0][n]
						var tempdist:int=DistFromInfo(p1,p2,p3,point)
						info=info*int(dist<=tempdist)+point*int(dist>tempdist) #point of previous error (fixed)
						dist=int(min(dist,tempdist))			#when they were equal info would become 0
		if pow(DistFromInside(p1,p2,p3,c1,c2,c3,size),2)>dist:
			break
	return info


func DistFromInside(p1:int,p2:int,p3:int,c1:int,c2:int,c3:int,size:int)->int:
        #minminminminmin moment
        #min(p1%32+0xffffff*int(c1-size<=0),31-p1%32+0xffffff*int(c1+size>=7)) x3 times and then +size*32
        p1%=32 
        p2%=32
        p3%=32 #it gets distance to the nearest border, but ignores borders that are beyond/adjacent to sector limit
        var result:int=int(min(min(min(min(min(p1+0xffffff*int(c1-size<=0),31-p1+0xffffff*int(c1+size>=7)),p2+0xffffff*int(c2-size<=0)),31-p2+0xffffff*int(c2+size>=7)),p3+0xffffff*int(c3-size<=0)),31-p3+0xffffff*int(c3+size>=7)))+size*32
        return result

func DistToBox(p1:int,p2:int,p3:int,s1:int,s2:int,s3:int,e1:int,e2:int,e3:int)->int:
	#max(max(start-pos,pos-end),0) repeated 3 times, once per axis
	var result:int=int(pow(int(max(max(s1-p1,p1-e1),0)),2))+int(pow(int(max(max(s2-p2,p2-e2),0)),2))+int(pow(int(max(max(s3-p3,p3-e3),0)),2))
	return result

func DistFromInfo(p1:int,p2:int,p3:int,info:int)->int: 
	return DistTo(p1,p2,p3,(info>>16)&0xff,(info>>8)&0xff,info&0xff)

func DistTo(p1:int,p2:int,p3:int,t1:int,t2:int,t3:int)->int:
	return int(pow(p1-t1,2))+int(pow(p2-t2,2))+int(pow(p3-t3,2))